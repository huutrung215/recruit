@layout MainLayout
@page "/NgayCongPage"
@using Blazored.LocalStorage;
@using Recruit.Server.Models;
@using Recruit.Server.Models.ModelView;
@inject ITinhCongService TinhCongService
@inject IJSRuntime JS
@inject ILocalStorageService LocalStorage

<h3>Chấm Công Nhân Viên</h3>
@{
    var count = Days.Count;
}
<div class="alert alert-danger @HideAlert" role="alert">
    @AlertContent
</div>
<div>
    <input type="text" @bind="Latitude" id="Latitude" class="d-none" />
    <input type="text" @bind="longitude" id="longitude" class="d-none" />
    <input type="date" @bind="fromDay" class="form-control w-50" data-date-format="dd-mm-yyyy" />
    <input type="date" @bind="toDay" class="form-control w-50" data-date-format="dd-mm-yyyy" />
    <select @onchange="(e => Select(e))" class="form-select w-50 @HideSearch">
        <option value="">Tất cả nhân viên</option>
        @foreach (var nhanvien in NhanViens)
        {
            <option value="@nhanvien.MaNV">@nhanvien.HoTen</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="() => Search()">Search</button>
    <button class="btn btn-primary @HideChamCong" @onclick="() => chamCong()">Cham Cong</button>
</div>

<RadzenGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PageSize="10" AllowSorting="true" Data="@quanLyChamCong" TItem="NgayCongView" ColumnWidth="200px">
    <Columns>
        <RadzenGridColumn TItem="NgayCongView" Title="STT" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="item">
                @((quanLyChamCong.IndexOf(item) + 1))
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="NgayCongView" Property="HoTen" Title="Họ Tên" TextAlign="TextAlign.Center"></RadzenGridColumn>
        @{
            int id = 0; // Khai báo biến id ở trong scope của RadzenGrid
        }
        @foreach (var day in Days)
        {
            <RadzenGridColumn TItem="NgayCongView" Title="@($"{day.Key}/{day.Value}")">
                <Template Context="item">
                    @{
                        id++;
                        var chamCong = item.chamCongs.FirstOrDefault(cc => cc.Ngay == day.Key.ToString());
                        if (chamCong != null)
                        {
                            <div class="row" style="flex-wrap: nowrap; margin-left:0;">
                                <div style="display: contents;">
                                    <select class="form-select" value="@chamCong.TrangThai" @onchange="(e => UpdateD(e, chamCong.Ngay, item.MaNV, chamCong.Thang, chamCong.Nam, chamCong.TrangThai))" style="width:auto;">
                                        <option value="0">Nghỉ</option>
                                        <option value="1">Sáng</option>
                                        <option value="2">Chiều</option>
                                        <option value="3">Cả ngày</option>
                                    </select>
                                </div>
                                @if (!string.IsNullOrEmpty(chamCong.TrangThai))
                                {
                                    <a href="/LocationPage/@item.MaNV/@chamCong.Ngay/@chamCong.Thang/@chamCong.Nam" target="_blank">Map</a>
                                }
                            </div>
                        }
                    }
                </Template>
            </RadzenGridColumn>
        }
    </Columns>
</RadzenGrid>

@code {
    public List<DayOfWeek> Days = new List<DayOfWeek>();
    List<NgayCongView> quanLyChamCong = new List<NgayCongView>();
    List<NhanVien> NhanViens = new List<NhanVien>();
    DateTime toDay;
    DateTime fromDay;
    private string HideAlert { get; set; } = "d-none";
    private string HideSearch { get; set; } = "d-none";
    private string HideChamCong { get; set; } = "d-none";
    private string AlertContent { get; set; } = "";
    private string longitude { get; set; } = "";
    private string Latitude { get; set; } = "";
    string MaNhanVien = "";
    string roleName = "";
    string email = "";
    string MaNV = "";

    protected override async void OnInitialized()
    {
        try
        {
            roleName = await LocalStorage.GetItemAsync<string>("RoleName");
            DateTime now = DateTime.Now;
            fromDay = new DateTime(now.Year, now.Month, 1);
            var days = DateTime.DaysInMonth(now.Year, now.Month);
            toDay = new DateTime(now.Year, now.Month, days);
            var DayOfWeek = new List<DayOfWeek>();

            for (var i = 1; i <= days; i++) {
                var dt = new DateTime(now.Year, now.Month, i);
                DayOfWeek.Add(new DayOfWeek() { Key = i, Value = dt.DayOfWeek.ToString() });
            }
            Days = DayOfWeek;
            if(roleName.ToString() == "Admin")
            {
                HideSearch = "";
                NhanViens = await TinhCongService.getsNhanVien();
                quanLyChamCong = await TinhCongService.layNgayCongToanBoNV(fromDay, toDay, "");
            }
            else if (roleName.ToString() == "Member")
            {
                HideChamCong = "";
                email = await LocalStorage.GetItemAsync<string>("Email");
                var NV = await TinhCongService.layNhanvienbyEmail(email.ToString());
                MaNV = NV.MaNV;
                quanLyChamCong = await TinhCongService.layNgayCongToanBoNV(fromDay, toDay, MaNV); ;
            }
            StateHasChanged();

        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
    public class DayOfWeek
    {
        public int Key { get; set; }
        public string? Value { get; set; }
    }
    public class GeoLocation
    {
        public string? Latitude { get; set; }
        public string? Longitude { get; set; }
    }
    private async Task Search()
    {
        var DayOfWeek = new List<DayOfWeek>();
        string message = "from day is not bigger than to day and smaller than 2 month";
        HideAlert = "d-none";
        if (fromDay > toDay || (toDay.Month - fromDay.Month > 1 && toDay.Year == fromDay.Year) || (toDay - fromDay).Days > 63)
        {
            HideAlert = "";
            AlertContent = message;

            return;
        }
        if(fromDay.Month == toDay.Month)
        {
            for (var i = fromDay.Day; i <= toDay.Day; i++)
            {
                var dt = new DateTime(fromDay.Year, fromDay.Month, i);
                DayOfWeek.Add(new DayOfWeek() { Key = i, Value = dt.DayOfWeek.ToString() });
            }   
        }
        else
        {
            var dayFrom = DateTime.DaysInMonth(fromDay.Year, fromDay.Month);
            for (var i = fromDay.Day; i <= dayFrom; i++)
            {
                var dt = new DateTime(fromDay.Year, fromDay.Month, i);
                DayOfWeek.Add(new DayOfWeek() { Key = i, Value = dt.DayOfWeek.ToString() });
            }

            for (var i = 1; i <= toDay.Day; i++)
            {
                var dt = new DateTime(toDay.Year, toDay.Month, i);
                DayOfWeek.Add(new DayOfWeek() { Key = i, Value = dt.DayOfWeek.ToString() });
            }
        }
        Days = DayOfWeek;

        if (roleName.ToString() == "Admin")
        {
            quanLyChamCong = await TinhCongService.layNgayCongToanBoNV(fromDay, toDay, MaNhanVien);
            StateHasChanged();
        }
        else if (roleName.ToString() == "Member")
        {
            quanLyChamCong = await TinhCongService.layNgayCongToanBoNV(fromDay, toDay, MaNV); ;
            StateHasChanged();
        }
    }
    private async Task UpdateD(ChangeEventArgs e, string day, string MaNv, string thang, string nam, string chamcong)
    {
        var getLocation = await JS.InvokeAsync<GeoLocation>("getGeoLocation", null);
        if (getLocation == null)
        {
            e.Value = "0";
            return;
        }
        if (getLocation.Latitude == "" || getLocation.Longitude == "")
        {
            await JS.InvokeVoidAsync("showAlert", null);
            e.Value = "0";
            return;
        }
        NgayCong ngayCong = new NgayCong()
            {
                MaNV = MaNv,
                Nam = nam,
                Thang = thang,
                Ngay = new DateTime(Int32.Parse(nam), Int32.Parse(thang), Int32.Parse(day)),
                TrangThai = e.Value == null ? "" : (e.Value.ToString() ?? ""),
                Latitude = getLocation.Latitude ?? "",
                Longitude = getLocation.Longitude ?? ""
            };
        await TinhCongService.updateTinhNgayCong(ngayCong);
    }


    private async Task chamCong()
    {
        var getLocation = await JS.InvokeAsync<GeoLocation>("getGeoLocation", null);
        if (getLocation == null)
        {
            return;
        }
        if (getLocation.Latitude == "" || getLocation.Longitude == "")
        {
            await JS.InvokeVoidAsync("showAlert", null);
            return;
        }
        var now = DateTime.Now;
        var trangThai = "";
        var ngayCongGet = await TinhCongService.getNgayCong(MaNV, now.Day.ToString(), now.Month.ToString(), now.Year.ToString());
        if(now.Hour >= 8 & now.Hour <= 12)
        {
            trangThai = "1";
        }
        else if (ngayCongGet != null && now.Hour > 12 && now.Hour <= 18)
        {
            if (ngayCongGet.TrangThai == "1")
            {
                trangThai = "3";
            }
            else
            {
                trangThai = "2";
            }
        }
        else if (ngayCongGet == null)
        {
            trangThai = "2";
        }
        NgayCong ngayCong = new NgayCong()
        {
            MaNV = MaNV,
            Nam = now.Year.ToString(),
            Thang = now.Month.ToString(),
            Ngay = new DateTime(now.Year, now.Month, now.Day),
            TrangThai = trangThai,
            Latitude = getLocation.Latitude ?? "",
            Longitude = getLocation.Longitude ?? ""
        };
        await TinhCongService.updateTinhNgayCong(ngayCong);
    }
    
    private void Select(ChangeEventArgs e)
    {
        MaNhanVien = e.Value == null ? "" : (e.Value.ToString() ?? "");
    }
}
